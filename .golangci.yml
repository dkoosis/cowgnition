# .golangci.yml
version: 2 # Schema version, required

run:
  # Specify the Go version used by your project
  # Update this if your project uses a newer Go version
  go: '1.24'
  # Timeout for analysis, e.g. 5m. Default is 1m.
  timeout: 5m
  # Exit code when issues were found. Default is 1.
  # issues-exit-code: 1
  # Include test files. Default is true.
  # tests: true

  # v2: Formatters are configured here and used implicitly by 'run'
  # and explicitly by the 'golangci-lint fmt' command.
formatters:
  enable:
  - gofmt
  - goimports # Includes gofmt checks + import sorting/grouping

linters:
  disable-all: true # Disable all linters by default
  # Enable the linters you want to use
  enable:
  # --- Formatters (gofmt, goimports) are NOT listed here in v2 ---

  # Core linters
  - errcheck # Check for unchecked errors
  - govet # Reports suspicious constructs
  - ineffassign # Detect ineffectual assignments
  - staticcheck # Static analysis checks (includes many SA checks)
  - unused # Check for unused constants, variables, functions and types

  # Code quality linters
  - gosec # Security checks
  - gocyclo # Cyclomatic complexity
  - misspell # Correct commonly misspelled words
  - revive # Replacement for golint (includes exported check)
  - unconvert # Remove unnecessary type conversions
  - unparam # Find unused function parameters and results

  # Additional useful linters
  - bodyclose # Check for unclosed HTTP response bodies
  - copyloopvar # Checks for proper loop variable capture (Go 1.22+ helps, but still good)
  - dogsled # Check for too many blank identifiers (_ = _, _ = _)
  - durationcheck # Check for durations with different units
  - errorlint # Find error handling mistakes (e.g., using == instead of errors.Is/As)
  - godot # Check comments end with a period
  - nilerr # Check for pattern return nil, err == nil
  # - noctx # Check for HTTP requests without context (Enable if using net/http client extensively)
  - thelper # Detect missing t.Helper() calls in tests
  - tparallel # Detect incorrect usage of t.Parallel() in tests
  # - whitespace # Generally covered by gofmt/goimports, but can catch trailing spaces

  # Linters to consider enabling later:
  # - gocritic # Offers many valuable checks, potentially noisy initially
  # - makezero # Find slice declarations that could use make([]T, 0, N)
  # - exhaustive # Check switch statements are exhaustive (useful for enums)
  # - testpackage # Check for common mistakes in test packages

linters-settings:
  gocyclo:
    # Adjust complexity based on team agreement
    min-complexity: 15
    # skip-tests: true # Usually fine to allow higher complexity in tests

  gosec:
    # Severity of errors to show (options: low, medium, high)
    severity: medium
    # Confidence level (options: low, medium, high)
    confidence: medium
    # exclude_rules:
    #  - G101 # Example: Exclude specific rules if needed

  revive:
    # Rules with custom configuration
    rules:
    - name: exported # Checks exported symbols have comments, etc.
      severity: warning # Keep as warning initially
      disabled: false
      arguments: [ "checkPrivateReceivers", "sayRepetitiveInsteadOfStutters" ]
    # Add other revive rule configurations here if needed

  errorlint:
    # Check for comparison of errors using errors.Is/As
    asserts: true
    # Check for wrapping errors using fmt.Errorf (vs %w)
    errorf: true

  goimports:
    # Group local imports separately
    local-prefixes: github.com/dkoosis/cowgnition

  # Explicitly mention unparam settings block, even if empty, for clarity
  unparam:
    # check-exported: true # Check exported functions (default is false) - consider enabling
    # algo: cha # Choose analysis algorithm if needed (default is fine)

    # staticcheck settings (optional, defaults are usually good)
    # staticcheck:
    # Check options: https://staticcheck.io/docs/options#checks
    # checks: ["all", "-SAXXXX"] # Example: Enable all, disable one
    # Or enable specific checks: ["SA*", "S1*", "QF*"]

issues:
  # Maximum issues count per linter. Set to 0 to disable limit. Default is 50.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable limit. Default is 3.
  max-same-issues: 0

  exclude-rules:
  # Exclude some linters from running on standard test files
  - path: "_test\\.go$"
    linters:
    - gocyclo # Complexity in tests is often acceptable
    - errcheck # Can be noisy in tests, but use exclusions carefully
    - gosec # Tests might use insecure practices intentionally, exclude carefully

  # --- ADD THIS RULE TO FIX THE PERSISTENT SA2001 ERROR ---
  # Exclude SA2001 specifically for the RUnlock line in mcp_server.go shutdown logic
  - path: internal/mcp/mcp_server\.go
    linters:
    - staticcheck
    text: "SA2001: empty critical section" # Match the error text
  # Example: Exclude specific check message globally or in specific path
  # - linters: [revive]
  #   text: "exported func .* should have comment"

  # Output section commented out as per your note about issues with newer versions
  # output:
  #   # Print lines with issues. Default is true.
  #   print-issued-lines: true
  #   # Print linter name in the end of issue text. Default is true.
  #   print-linter-name: true
  #   # Make issues output unique by line. Default is true.
  #   uniq-by-line: true
  #   # Sort results by: file, line, column, severity, message, linter. Default is true.
  #   sort-results: true
  #   # Define output formats. It should be a LIST/SLICE of maps.
  #   formats:
  #     # Each item starts with '-' and contains key-value pairs (a map).
  #   - format: colored-line-number # Default and usually best for console
  #     # path: report.txt # Optional: Path can only be specified for one format
  #   # Example: output JSON to a file
  #   # - format: json
  #   #   path: report.json
