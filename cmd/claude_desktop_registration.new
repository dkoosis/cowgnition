-// file: cmd/claude_desktop_registration.go
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/cockroachdb/errors"
)

// ClaudeDesktopConfig represents the structure of Claude Desktop's configuration file.
// It holds the mapping of MCP server configurations available to Claude Desktop.
type ClaudeDesktopConfig struct {
	MCPServers map[string]MCPServerConfig `json:"mcpServers"`
}

// MCPServerConfig represents a server configuration in Claude Desktop.
// It contains the command to execute, arguments, and optional environment variables.
type MCPServerConfig struct {
	Command string            `json:"command"`
	Args    []string          `json:"args"`
	Env     map[string]string `json:"env,omitempty"`
}

// runSetup performs the setup process for CowGnition.
// It configures both the local application and integrates with Claude Desktop.
// It provides a user-friendly, guided experience for first-time users.
func runSetup(configPath string) error {
	fmt.Println("\nüêÆ Welcome to CowGnition Setup!")
	fmt.Println("This wizard will help you connect Remember The Milk with Claude Desktop.\n")

	// Get executable path
	exePath, err := os.Executable()
	if err != nil {
		return errors.Wrap(err, "failed to get executable path")
	}
	exePath, err = filepath.Abs(exePath)
	if err != nil {
		return errors.Wrap(err, "failed to get absolute executable path")
	}

	if debugMode {
		log.Printf("Using executable path: %s", exePath)
	}

	// Check RTM API key and shared secret
	fmt.Println("Step 1: Remember The Milk API Credentials")
	fmt.Println("----------------------------------------")
	rtmAPIKey, rtmSecret := promptForRTMCredentials()

	// Check and create local config
	fmt.Println("\nStep 2: Creating Configuration File")
	fmt.Println("----------------------------------")
	err = createConfigWithCredentials(configPath, rtmAPIKey, rtmSecret)
	if err != nil {
		return errors.Wrap(err, "failed to create configuration")
	}

	// Configure Claude Desktop
	fmt.Println("\nStep 3: Configuring Claude Desktop Integration")
	fmt.Println("--------------------------------------------")
	err = configureClaudeDesktop(exePath, configPath)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è Warning: Failed to configure Claude Desktop automatically: %v\n", err)
		fmt.Println("You'll need to configure Claude Desktop manually.")
		printManualSetupInstructions(exePath, configPath)
	} else {
		fmt.Println("‚úÖ Claude Desktop successfully configured!")
	}

	// Test the connection to RTM (optional)
	fmt.Println("\nStep 4: Testing Remember The Milk Connection")
	fmt.Println("------------------------------------------")
	connectionStatus := testRTMConnection(configPath)
	if !connectionStatus {
		fmt.Println("‚ö†Ô∏è Could not verify RTM connection. You'll need to authenticate when you first use CowGnition.")
	} else {
		fmt.Println("‚úÖ Successfully connected to Remember The Milk!")
	}

	// Print success message and next steps
	fmt.Println("\n‚ú® CowGnition setup complete! ‚ú®")
	fmt.Println("\nNext steps:")
	fmt.Println("1. Run 'cowgnition serve' to start the server")
	fmt.Println("2. Open Claude Desktop to start using CowGnition")
	fmt.Println("3. Try asking Claude: \"What are my RTM tasks?\"")

	fmt.Println("\nFor more information, type 'cowgnition help'")

	return nil
}

// promptForRTMCredentials guides the user to obtain and enter RTM API credentials.
func promptForRTMCredentials() (string, string) {
	// Check for environment variables first
	apiKey := os.Getenv("RTM_API_KEY")
	secret := os.Getenv("RTM_SHARED_SECRET")

	if apiKey != "" && secret != "" {
		fmt.Println("‚úÖ Found RTM credentials in environment variables.")
		return apiKey, secret
	}

	fmt.Println("To connect with Remember The Milk, you'll need API credentials.")
	fmt.Println("1. Visit: https://www.rememberthemilk.com/services/api/keys.rtm")
	fmt.Println("2. Sign in and request an API key")
	fmt.Println("3. Enter the provided credentials below")

	// In a real implementation, we would prompt for input here
	// For now, we'll just remind users to update the config file
	fmt.Println("\nPlease edit the configuration file after setup to add your:")
	fmt.Println("- RTM API Key")
	fmt.Println("- RTM Shared Secret")

	return "", ""
}

// createConfigWithCredentials creates a configuration file with the provided RTM credentials.
func createConfigWithCredentials(configPath, apiKey, secret string) error {
	// Check if config already exists
	if _, err := os.Stat(configPath); err == nil {
		fmt.Printf("Configuration file already exists at %s\n", configPath)
		return nil
	}

	// Ensure directory exists
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return errors.Wrap(err, "failed to create configuration directory")
	}

	// Create default config with credentials
	fmt.Printf("Creating configuration at %s\n", configPath)

	// Default config with Remember The Milk settings
	defaultConfig := fmt.Sprintf(`server:
  name: "CowGnition RTM"
  port: 8080

rtm:
  api_key: "%s"
  shared_secret: "%s"

auth:
  token_path: "~/.config/cowgnition/tokens"
`, apiKey, secret)

	// Use more secure file permissions (0600 instead of 0644)
	if err := os.WriteFile(configPath, []byte(defaultConfig), 0600); err != nil {
		return errors.Wrap(err, "failed to write configuration file")
	}

	fmt.Println("‚úÖ Configuration file created successfully")
	if apiKey == "" || secret == "" {
		fmt.Printf("‚ö†Ô∏è Please edit %s to add your RTM API key and shared secret.\n", configPath)
	}

	return nil
}

// testRTMConnection attempts to connect to RTM API to verify credentials.
// Returns true if connection is successful, false otherwise.
func testRTMConnection(configPath string) bool {
	fmt.Println("Attempting to connect to Remember The Milk...")
	// In a real implementation, we would:
	// 1. Load the config
	// 2. Create an RTM client
	// 3. Make a simple API call like rtm.test.echo
	// 4. Return true if successful

	// For now, this is a placeholder
	fmt.Println("‚úì Connection test skipped in this version")
	return false
}

// configureClaudeDesktop updates Claude Desktop's configuration to include CowGnition.
// It reads the existing configuration (if any), adds the CowGnition server entry,
// and writes the updated configuration back to disk.
//
// exePath string: Path to the CowGnition executable.
// configPath string: Path to the CowGnition configuration file.
//
// Returns:
//
//	error: An error if configuration fails, nil on success.
func configureClaudeDesktop(exePath, configPath string) error {
	// Determine Claude Desktop config path based on OS
	claudeConfigPath := getClaudeConfigPath()

	if debugMode {
		log.Printf("Claude Desktop config path: %s", claudeConfigPath)
	}

	// Create args for the server
	args := []string{"serve", "--transport", "stdio", "--config", configPath}

	// Build the server configuration
	serverConfig := MCPServerConfig{
		Command: exePath,
		Args:    args,
	}

	// Read existing Claude config if it exists
	var claudeConfig ClaudeDesktopConfig
	if _, err := os.Stat(claudeConfigPath); err == nil {
		data, err := os.ReadFile(claudeConfigPath)
		if err != nil {
			return errors.Wrap(err, "failed to read Claude Desktop configuration")
		}

		if err := json.Unmarshal(data, &claudeConfig); err != nil {
			// If the file exists but is invalid, create a new one
			if debugMode {
				log.Printf("Failed to parse existing Claude Desktop config, creating new one: %v", err)
			}
			claudeConfig = ClaudeDesktopConfig{
				MCPServers: make(map[string]MCPServerConfig),
			}
		}
	} else {
		// Create new config if it doesn't exist
		claudeConfig = ClaudeDesktopConfig{
			MCPServers: make(map[string]MCPServerConfig),
		}
	}

	// Add our server to the config
	claudeConfig.MCPServers["cowgnition"] = serverConfig

	// Write the updated config
	data, err := json.MarshalIndent(claudeConfig, "", "  ")
	if err != nil {
		return errors.Wrap(err, "failed to marshal Claude Desktop configuration")
	}

	// Ensure directory exists
	claudeConfigDir := filepath.Dir(claudeConfigPath)
	if err := os.MkdirAll(claudeConfigDir, 0755); err != nil {
		return errors.Wrap(err, "failed to create Claude Desktop configuration directory")
	}

	// Use more secure file permissions (0600 instead of 0644)
	if err := os.WriteFile(claudeConfigPath, data, 0600); err != nil {
		return errors.Wrap(err, "failed to write Claude Desktop configuration")
	}

	fmt.Printf("Successfully configured Claude Desktop at %s\n", claudeConfigPath)
	return nil
}

// getClaudeConfigPath returns the path to Claude Desktop's configuration file based on the OS.
// It handles the different filesystem locations for each supported operating system.
//
// Returns:
//
//	string: The path to the Claude Desktop configuration file.
func getClaudeConfigPath() string {
	var configDir string

	switch runtime.GOOS {
	case "darwin":
		homeDir, _ := os.UserHomeDir()
		configDir = filepath.Join(homeDir, "Library", "Application Support", "Claude")
	case "windows":
		configDir = filepath.Join(os.Getenv("APPDATA"), "Claude")
	default:
		homeDir, _ := os.UserHomeDir()
		configDir = filepath.Join(homeDir, ".config", "Claude")
	}

	return filepath.Join(configDir, "claude_desktop_config.json")
}

// printManualSetupInstructions prints instructions for manually configuring Claude Desktop.
// This is used as a fallback when automatic configuration fails.
//
// exePath string: Path to the CowGnition executable.
// configPath string: Path to the CowGnition configuration file.
func printManualSetupInstructions(exePath, configPath string) {
	claudeConfigPath := getClaudeConfigPath()

	fmt.Println("\n==== Manual Claude Desktop Configuration ====")
	fmt.Printf("1. Create or edit the file at: %s\n", claudeConfigPath)
	fmt.Println("2. Add the following configuration:")

	// Escape backslashes in Windows paths for JSON
	if runtime.GOOS == "windows" {
		exePath = strings.ReplaceAll(exePath, "\\", "\\\\")
		configPath = strings.ReplaceAll(configPath, "\\", "\\\\")
	}

	configExample := fmt.Sprintf(`{
  "mcpServers": {
    "cowgnition": {
      "command": "%s",
      "args": ["serve", "--transport", "stdio", "--config", "%s"]
    }
  }
}`, exePath, configPath)

	fmt.Println(configExample)
	fmt.Println("3. Restart Claude Desktop to apply the changes")
	fmt.Println("==============================================")
}
