// file: internal/mcp/mcp_server.go

// This is just the relevant section of the mapErrorToJSONRPCComponents function
// where we handle method sequence validation errors

// mapErrorToJSONRPCComponents maps Go errors to JSON-RPC code, message, and optional data.
func (s *Server) mapErrorToJSONRPCComponents(err error) (code int, message string, data interface{}) {
	data = nil // Initialize data

	var mcpErr *mcperrors.BaseError
	var transportErr *transport.Error
	var validationErr *schema.ValidationError

	// Check for specific error strings first for method not found/sequence errors
	errStr := err.Error()
	if strings.Contains(errStr, "Method not found:") {
		code = transport.JSONRPCMethodNotFound // -32601
		message = "Method not found."
		// Try to extract method name for data field
		methodName := strings.TrimPrefix(errStr, "Method not found: ")
		if methodName != errStr { // Check if prefix was actually removed
			data = map[string]interface{}{
				"method": methodName,
				"detail": "The requested method is not supported by this MCP server."
			}
		}
	} else if strings.Contains(errStr, "protocol sequence error:") {
		code = transport.JSONRPCInvalidRequest // -32600
		message = "Protocol sequence error."

		// Extract the detailed error information
		// Include the full sequence error message in the data
		data = map[string]interface{}{
			"detail": errStr,
			"state": s.connectionState.CurrentState(),
		}

		// Check for specific protocol sequence errors to add targeted help
		if strings.Contains(errStr, "must first call 'initialize'") {
			data = map[string]interface{}{
				"detail": errStr,
				"state": s.connectionState.CurrentState(),
				"help": "The MCP protocol requires initialize to be called first to establish connection capabilities.",
				"reference": "https://modelcontextprotocol.io/docs/concepts/messages/#server-initialization"
			}
		} else if strings.Contains(errStr, "can only be called once") {
			data = map[string]interface{}{
				"detail": errStr,
				"state": s.connectionState.CurrentState(),
				"help": "The initialize method can only be called once per connection.",
				"reference": "https://modelcontextprotocol.io/docs/concepts/messages/#server-initialization"
			}
		}
	} else if strings.Contains(errStr, "connection not initialized") {
		// This is a fallback for other connection state errors that may not use the new format
		code = transport.JSONRPCInvalidRequest // -32600
		message = "Protocol sequence error."
		data = map[string]interface{}{
			"detail": errStr,
			"state": s.connectionState.CurrentState(),
			"help": "The MCP protocol requires initialize to be called first to establish connection capabilities."
		}

	// Then check specific error types
	} else if errors.As(err, &validationErr) {
		code, message, data = mapValidationError(validationErr)
	} else if errors.As(err, &mcpErr) {
		code, message = mapMCPError(mcpErr) // Passes MCP context if needed
		if mcpErr.Context != nil {
			data = mcpErr.Context
		}
	} else if errors.As(err, &transportErr) {
		code, message, data = transport.MapErrorToJSONRPC(transportErr)
	} else {
		// Default for generic Go errors
		code, message = mapGenericGoError(err)
	}

	return code, message, data
}
