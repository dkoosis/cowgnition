// file: internal/rtm/service_mock_test.go
package rtm

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	"github.com/cockroachdb/errors"
	"github.com/dkoosis/cowgnition/internal/config"
	"github.com/dkoosis/cowgnition/internal/logging"
	"github.com/dkoosis/cowgnition/internal/mcp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

// MockClient is a mock implementation of the RTM client
type MockClient struct {
	mock.Mock
}

// CallMethod mocks the CallMethod method
func (m *MockClient) CallMethod(ctx context.Context, method string, params map[string]string) (json.RawMessage, error) {
	args := m.Called(ctx, method, params)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(json.RawMessage), args.Error(1)
}

// GetAuthState mocks the GetAuthState method
func (m *MockClient) GetAuthState(ctx context.Context) (*AuthState, error) {
	args := m.Called(ctx)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*AuthState), args.Error(1)
}

// StartAuthFlow mocks the StartAuthFlow method
func (m *MockClient) StartAuthFlow(ctx context.Context) (string, string, error) {
	args := m.Called(ctx)
	return args.String(0), args.String(1), args.Error(2)
}

// CompleteAuthFlow mocks the CompleteAuthFlow method
func (m *MockClient) CompleteAuthFlow(ctx context.Context, frob string) (string, error) {
	args := m.Called(ctx, frob)
	return args.String(0), args.Error(1)
}

// GetLists mocks the GetLists method
func (m *MockClient) GetLists(ctx context.Context) ([]TaskList, error) {
	args := m.Called(ctx)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]TaskList), args.Error(1)
}

// GetTasks mocks the GetTasks method
func (m *MockClient) GetTasks(ctx context.Context, filter string) ([]Task, error) {
	args := m.Called(ctx, filter)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]Task), args.Error(1)
}

// GetAuthToken mocks the GetAuthToken method
func (m *MockClient) GetAuthToken() string {
	args := m.Called()
	return args.String(0)
}

// SetAuthToken mocks the SetAuthToken method
func (m *MockClient) SetAuthToken(token string) {
	m.Called(token)
}

// CreateTask mocks the CreateTask method
func (m *MockClient) CreateTask(ctx context.Context, name string, listID string) (*Task, error) {
	args := m.Called(ctx, name, listID)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*Task), args.Error(1)
}

// CompleteTask mocks the CompleteTask method
func (m *MockClient) CompleteTask(ctx context.Context, listID string, taskID string) error {
	args := m.Called(ctx, listID, taskID)
	return args.Error(0)
}

// TestService_WithMockClient tests the RTM service with a mock client
func TestService_WithMockClient(t *testing.T) {
	// Create mock client
	mockClient := new(MockClient)

	// Create service with mock client
	logger := logging.GetNoopLogger()
	service := &Service{
		client:       mockClient,
		config:       &config.Config{},
		logger:       logger,
		authState:    &AuthState{},
		initialized:  true,
		tokenStorage: nil, // Mock doesn't need token storage
	}

	// Context for all tests
	ctx := context.Background()

	// Test GetTools
	t.Run("GetTools", func(t *testing.T) {
		tools := service.GetTools()
		assert.NotEmpty(t, tools, "Service should return tools")
	})

	// Test CallTool - getTasks - Success
	t.Run("CallTool_GetTasks_Success", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
			Username:        "mockuser",
		}, nil).Once()

		mockClient.On("GetTasks", ctx, "status:incomplete").Return([]Task{
			{
				ID:        "task1_1",
				Name:      "Test Task 1",
				ListID:    "list1",
				ListName:  "Test List",
				Priority:  1,
				DueDate:   time.Now().Add(24 * time.Hour),
				StartDate: time.Now(),
			},
		}, nil).Once()

		// Call the tool
		args, _ := json.Marshal(map[string]string{"filter": "status:incomplete"})
		result, err := service.CallTool(ctx, "getTasks", args)

		// Verify
		require.NoError(t, err, "CallTool should not return error on success")
		require.NotNil(t, result, "Result should not be nil")
		assert.False(t, result.IsError, "Result should not indicate error")
		assert.NotEmpty(t, result.Content, "Result should have content")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test CallTool - getTasks - Not Authenticated
	t.Run("CallTool_GetTasks_NotAuthenticated", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: false,
		}, nil).Once()

		// Call the tool
		args, _ := json.Marshal(map[string]string{"filter": "status:incomplete"})
		result, err := service.CallTool(ctx, "getTasks", args)

		// Verify
		require.NoError(t, err, "CallTool should not return error for not authenticated")
		require.NotNil(t, result, "Result should not be nil")
		assert.True(t, result.IsError, "Result should indicate error")
		assert.NotEmpty(t, result.Content, "Result should have error content")
		assert.Contains(t, result.Content[0].(mcp.TextContent).Text, "Not authenticated", "Result should contain auth error message")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test CallTool - getTasks - API Error
	t.Run("CallTool_GetTasks_APIError", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
			Username:        "mockuser",
		}, nil).Once()

		mockClient.On("GetTasks", ctx, "status:incomplete").Return(nil,
			errors.New("API error")).Once()

		// Call the tool
		args, _ := json.Marshal(map[string]string{"filter": "status:incomplete"})
		result, err := service.CallTool(ctx, "getTasks", args)

		// Verify
		require.NoError(t, err, "CallTool should not return error for API error")
		require.NotNil(t, result, "Result should not be nil")
		assert.True(t, result.IsError, "Result should indicate error")
		assert.NotEmpty(t, result.Content, "Result should have error content")
		assert.Contains(t, result.Content[0].(mcp.TextContent).Text, "Error", "Result should contain API error message")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test CallTool - createTask - Success
	t.Run("CallTool_CreateTask_Success", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
			Username:        "mockuser",
		}, nil).Once()

		mockClient.On("CreateTask", ctx, "Test Task", "").Return(&Task{
			ID:       "task1_1",
			Name:     "Test Task",
			ListID:   "list1",
			ListName: "Inbox",
		}, nil).Once()

		// Call the tool
		args, _ := json.Marshal(map[string]string{"name": "Test Task"})
		result, err := service.CallTool(ctx, "createTask", args)

		// Verify
		require.NoError(t, err, "CallTool should not return error on success")
		require.NotNil(t, result, "Result should not be nil")
		assert.False(t, result.IsError, "Result should not indicate error")
		assert.NotEmpty(t, result.Content, "Result should have content")
		assert.Contains(t, result.Content[0].(mcp.TextContent).Text, "Successfully created", "Result should mention success")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test CallTool - completeTask - Success
	t.Run("CallTool_CompleteTask_Success", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
			Username:        "mockuser",
		}, nil).Once()

		mockClient.On("CompleteTask", ctx, "list1", "task1").Return(nil).Once()

		// Call the tool
		args, _ := json.Marshal(map[string]interface{}{"taskId": "task1", "listId": "list1"})
		result, err := service.CallTool(ctx, "completeTask", args)

		// Verify
		require.NoError(t, err, "CallTool should not return error on success")
		require.NotNil(t, result, "Result should not be nil")
		assert.False(t, result.IsError, "Result should not indicate error")
		assert.NotEmpty(t, result.Content, "Result should have content")
		assert.Contains(t, result.Content[0].(mcp.TextContent).Text, "Successfully completed", "Result should mention success")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test ReadResource - rtm://auth
	t.Run("ReadResource_Auth", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
			Username:        "mockuser",
			FullName:        "Mock User",
			UserID:          "user123",
		}, nil).Once()

		// Call the method
		content, err := service.ReadResource(ctx, "rtm://auth")

		// Verify
		require.NoError(t, err, "ReadResource should not return error")
		require.NotEmpty(t, content, "Content should not be empty")

		textContent, ok := content[0].(mcp.TextResourceContents)
		assert.True(t, ok, "Content should be TextResourceContents")
		assert.Contains(t, textContent.Text, "isAuthenticated", "Content should include auth state")
		assert.Contains(t, textContent.Text, "true", "Content should show authenticated")
		assert.Contains(t, textContent.Text, "mockuser", "Content should include username")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test ReadResource - rtm://lists
	t.Run("ReadResource_Lists", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
		}, nil).Once()

		mockClient.On("GetLists", ctx).Return([]TaskList{
			{ID: "list1", Name: "Test List 1"},
			{ID: "list2", Name: "Test List 2"},
		}, nil).Once()

		// Call the method
		content, err := service.ReadResource(ctx, "rtm://lists")

		// Verify
		require.NoError(t, err, "ReadResource should not return error")
		require.NotEmpty(t, content, "Content should not be empty")

		textContent, ok := content[0].(mcp.TextResourceContents)
		assert.True(t, ok, "Content should be TextResourceContents")
		assert.Contains(t, textContent.Text, "Test List 1", "Content should include list name")
		assert.Contains(t, textContent.Text, "list1", "Content should include list ID")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test ReadResource - rtm://tasks
	t.Run("ReadResource_Tasks", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: true,
		}, nil).Once()

		mockClient.On("GetTasks", ctx, "").Return([]Task{
			{
				ID:       "task1_1",
				Name:     "Test Task 1",
				ListID:   "list1",
				ListName: "Test List",
			},
		}, nil).Once()

		// Call the method
		content, err := service.ReadResource(ctx, "rtm://tasks")

		// Verify
		require.NoError(t, err, "ReadResource should not return error")
		require.NotEmpty(t, content, "Content should not be empty")

		textContent, ok := content[0].(mcp.TextResourceContents)
		assert.True(t, ok, "Content should be TextResourceContents")
		assert.Contains(t, textContent.Text, "Test Task 1", "Content should include task name")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})

	// Test ReadResource - Not Authenticated
	t.Run("ReadResource_NotAuthenticated", func(t *testing.T) {
		// Setup mock
		mockClient.On("GetAuthState", ctx).Return(&AuthState{
			IsAuthenticated: false,
		}, nil).Once()

		// Call the method
		content, err := service.ReadResource(ctx, "rtm://lists")

		// Verify
		require.NoError(t, err, "ReadResource should not return error for not authenticated")
		require.NotEmpty(t, content, "Content should not be empty")

		textContent, ok := content[0].(mcp.TextResourceContents)
		assert.True(t, ok, "Content should be TextResourceContents")
		assert.Contains(t, textContent.Text, "not_authenticated", "Content should indicate not authenticated")

		// Verify mock was called
		mockClient.AssertExpectations(t)
	})
}
